# Generated by Django 4.2.7 on 2025-03-02 17:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='due date')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='start date')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='estimated hours')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='is recurring')),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=50, null=True, verbose_name='recurrence pattern')),
                ('recurrence_end_date', models.DateTimeField(blank=True, null=True, verbose_name='recurrence end date')),
                ('is_template', models.BooleanField(default=False, verbose_name='is template')),
                ('template_name', models.CharField(blank=True, max_length=255, verbose_name='template name')),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='task_attachments/', verbose_name='file')),
                ('filename', models.CharField(max_length=255, verbose_name='filename')),
                ('file_type', models.CharField(max_length=100, verbose_name='file type')),
                ('file_size', models.PositiveIntegerField(verbose_name='file size')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
            ],
            options={
                'verbose_name': 'task attachment',
                'verbose_name_plural': 'task attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('color', models.CharField(default='#3B82F6', max_length=20, verbose_name='color')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'task category',
                'verbose_name_plural': 'task categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'task comment',
                'verbose_name_plural': 'task comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('field_name', models.CharField(max_length=100, verbose_name='field name')),
                ('old_value', models.TextField(blank=True, null=True, verbose_name='old value')),
                ('new_value', models.TextField(blank=True, null=True, verbose_name='new value')),
            ],
            options={
                'verbose_name': 'task history',
                'verbose_name_plural': 'task history entries',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TaskNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('assignment', 'Task Assignment'), ('due_soon', 'Task Due Soon'), ('overdue', 'Task Overdue'), ('comment', 'New Comment'), ('mention', 'Mention'), ('status_change', 'Status Change')], max_length=20, verbose_name='type')),
                ('content', models.TextField(verbose_name='content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('read', models.BooleanField(default=False, verbose_name='read')),
            ],
            options={
                'verbose_name': 'task notification',
                'verbose_name_plural': 'task notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('color', models.CharField(default='#3B82F6', max_length=20, verbose_name='color')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('level', models.PositiveIntegerField(default=0, verbose_name='level')),
            ],
            options={
                'verbose_name': 'task priority',
                'verbose_name_plural': 'task priorities',
                'ordering': ['-level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('color', models.CharField(default='#3B82F6', max_length=20, verbose_name='color')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
            ],
            options={
                'verbose_name': 'task status',
                'verbose_name_plural': 'task statuses',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskTimer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='duration')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timers', to='tasks.task')),
            ],
            options={
                'verbose_name': 'task timer',
                'verbose_name_plural': 'task timers',
                'ordering': ['-start_time'],
            },
        ),
    ]
