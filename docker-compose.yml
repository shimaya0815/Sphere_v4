# docker-compose.yml

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - websocket
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_WS_URL=http://localhost:8001
      - SOCKET_HOST=websocket:8001
      - WDS_SOCKET_PORT=0
      - CHOKIDAR_USEPOLLING=true
      - HOST=0.0.0.0
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - default
      - frontend-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
    environment:
      - DEBUG=True
      - SECRET_KEY=dev_secret_key
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend,backend:8000,host.docker.internal,testserver
      - DATABASE_URL=postgres://postgres:postgres@db:5432/sphere
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./websocket:/app
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/sphere
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,http://localhost:8000,http://backend:8000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - default
      - frontend-network

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=sphere
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"

volumes:
  postgres_data:

networks:
  default:
  frontend-network:
    driver: bridge