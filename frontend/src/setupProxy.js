const { createProxyMiddleware } = require('http-proxy-middleware');

// „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆ„Éõ„Çπ„ÉàË®≠ÂÆö - DockerÁí∞Â¢É„Å®„É≠„Éº„Ç´„É´ÈñãÁô∫„ÅÆ‰∏°Êñπ„Çí„Çµ„Éù„Éº„Éà
const getBackendHost = () => {
  // REACT_APP_API_URLÁí∞Â¢ÉÂ§âÊï∞„Åå„ÅÇ„Çå„Å∞„Åù„Çå„Çí‰ΩøÁî®ÔºàDockerÁí∞Â¢ÉÂêë„ÅëÔºâ
  if (process.env.REACT_APP_API_URL) {
    return process.env.REACT_APP_API_URL;
  }
  // „Éá„Éï„Ç©„É´„Éà„ÅØlocalhost
  return 'http://localhost:8000';
};

const BACKEND_HOST = getBackendHost();
const SOCKET_HOST = process.env.REACT_APP_SOCKET_URL || 'http://localhost:8001';

module.exports = function(app) {
  // „Ç∑„É≥„Éó„É´„Å™Ëµ∑Âãï„É°„ÉÉ„Çª„Éº„Ç∏
  console.log(`Sphere Frontend Proxy: Backend -> ${BACKEND_HOST}, Socket.IO -> ${SOCKET_HOST}`);

  // API„Éó„É≠„Ç≠„Ç∑„ÅÆÂÖ±ÈÄöË®≠ÂÆö
  const createApiProxy = (pathPrefix) => {
    return createProxyMiddleware({
      target: BACKEND_HOST,
      changeOrigin: true,
      secure: false,
      logLevel: process.env.NODE_ENV === 'development' ? 'debug' : 'error',
      pathRewrite: {
        // /auth„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„Åæ„ÄÅ/api„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„ÅÆÂ†¥Âêà„ÇÇ„Åù„ÅÆ„Åæ„ÅæËª¢ÈÄÅ
        [`^${pathPrefix}`]: pathPrefix
      },
      onProxyReq: (proxyReq, req, res) => {
        // ÈñãÁô∫‰∏≠„ÅØÊúÄÂ∞èÈôê„ÅÆ„É≠„Ç∞„ÇíÂá∫Âäõ
        if (process.env.NODE_ENV === 'development') {
          console.log(`‚Üí ${req.method} ${req.url} ‚Üí ${BACKEND_HOST}${proxyReq.path}`);
        }
        
        // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆlocalStorage„Åã„Çâ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó
        // Ê≥®ÊÑè: „Éó„É≠„Ç≠„Ç∑„Åß„ÅØlocalStorage„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅ
        // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅÆRequest Interceptor„Åß„Éà„Éº„ÇØ„É≥„ÇíË®≠ÂÆö„Åó„Åæ„Åô
      },
      onProxyRes: (proxyRes, req, res) => {
        // ÈñãÁô∫‰∏≠„ÅØÊúÄÂ∞èÈôê„ÅÆ„É≠„Ç∞„ÇíÂá∫Âäõ
        if (process.env.NODE_ENV === 'development' && proxyRes.statusCode >= 400) {
          console.log(`‚Üê ${proxyRes.statusCode} ${req.method} ${req.url}`);
        }
      },
      onError: (err, req, res) => {
        console.error(`Error: ${req.method} ${req.url} - ${err.message}`);
        
        if (!res.headersSent) {
          res.writeHead(500, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ 
            error: 'API Connection Error', 
            message: `Could not connect to backend at ${BACKEND_HOST}`
          }));
        }
      }
    });
  };

  // API URL„Éë„Çø„Éº„É≥„ÅÆ„Éó„É≠„Ç≠„Ç∑Ë®≠ÂÆö
  app.use('/api', createApiProxy('/api'));
  
  // Ë™çË®ºÁî®URL„Éë„Çø„Éº„É≥„ÅÆ„Éó„É≠„Ç≠„Ç∑Ë®≠ÂÆö
  app.use('/auth', createApiProxy('/auth'));

  // Socket.IO„Éó„É≠„Ç≠„Ç∑Ë®≠ÂÆö„ÅÆÊîπÂñÑ
  app.use('/socket.io', createProxyMiddleware({
    target: SOCKET_HOST,
    changeOrigin: true,
    ws: true,
    secure: false,
    logLevel: 'debug',
    // Socket.IO„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å„Å™„Ç™„Éó„Ç∑„Éß„É≥
    // Ping„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíÂª∂Èï∑
    socketTimeoutMs: 60000,
    // WebSocket„ÅÆÂÜçË©¶Ë°å„ÇíÁÑ°ÂäπÂåñ
    wsReconnectDelay: -1,
    onProxyReq: (proxyReq, req, res) => {
      const isWebSocket = req.headers.upgrade && req.headers.upgrade.toLowerCase() === 'websocket';
      console.log(`üîå Socket.IO„Éó„É≠„Ç≠„Ç∑: ${req.method} ${req.url} ‚Üí ${SOCKET_HOST}${proxyReq.path} ${isWebSocket ? '(WebSocket)' : '(HTTP)'}`);
      
      // ÂøÖË¶Å„Å™„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†„Åó„Å¶„Éó„É≠„Ç≠„Ç∑„ÅÆ‰ø°È†ºÊÄß„ÇíÂêë‰∏ä
      if (isWebSocket) {
        proxyReq.setHeader('Connection', 'Upgrade');
        proxyReq.setHeader('Upgrade', 'websocket');
      }
    },
    onProxyRes: (proxyRes, req, res) => {
      console.log(`üîç Socket.IO„Éó„É≠„Ç≠„Ç∑„É¨„Çπ„Éù„É≥„Çπ: ${proxyRes.statusCode}`);
    },
    onError: (err, req, res) => {
      console.error(`‚ùå Socket.IO„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº: ${req.method} ${req.url} - ${err.message}`);
      
      // „Ç®„É©„Éº„Åå„ÅÇ„Çå„Å∞„Éñ„É©„Ç¶„Ç∂„Å´Ëª¢ÈÄÅ
      if (!res.headersSent) {
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Socket.IO„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº', message: err.message }));
      }
    }
  }));
  
  // ÂæìÊù•„ÅÆWebSocket„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇÇÂºï„ÅçÁ∂ö„Åç„Çµ„Éù„Éº„ÉàÔºàÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÔºâ
  // „Åì„Çå„Å´„Çà„ÇäÊó¢Â≠ò„ÅÆ„Ç≥„Éº„Éâ„ÅØÂ§âÊõ¥„Å™„Åó„ÅßÂãï‰Ωú„Åô„Çã
  app.use('/ws', createProxyMiddleware({
    target: SOCKET_HOST,
    changeOrigin: true,
    ws: true, 
    secure: false,
    logLevel: 'debug',
    onProxyReq: (proxyReq, req, res) => {
      const isWebSocket = req.headers.upgrade && req.headers.upgrade.toLowerCase() === 'websocket';
      console.log(`üîå „É¨„Ç¨„Ç∑„ÉºWebSocket„Éó„É≠„Ç≠„Ç∑: ${req.method} ${req.url} ‚Üí ${SOCKET_HOST}${proxyReq.path} ${isWebSocket ? '(WebSocket)' : '(HTTP)'}`);
    },
    onError: (err, req, res) => {
      console.error(`‚ùå „É¨„Ç¨„Ç∑„ÉºWebSocket„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº: ${req.method} ${req.url} - ${err.message}`);
      if (!res.headersSent) {
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'WebSocket„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº', message: err.message }));
      }
    }
  }));
  
  // „ÉÅ„É£„ÉÉ„Éà„ÇÑ„Çø„Çπ„ÇØ„ÅÆÁõ¥Êé•„Éë„Çπ„ÇÇÂºï„ÅçÁ∂ö„Åç„Çµ„Éù„Éº„ÉàÔºàÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÔºâ
  app.use('/chat', createProxyMiddleware({
    target: SOCKET_HOST,
    changeOrigin: true,
    ws: true,
    secure: false,
    logLevel: 'debug',
    onProxyReq: (proxyReq, req, res) => {
      const isWebSocket = req.headers.upgrade && req.headers.upgrade.toLowerCase() === 'websocket';
      console.log(`üîå „É¨„Ç¨„Ç∑„Éº„ÉÅ„É£„ÉÉ„Éà„Éó„É≠„Ç≠„Ç∑: ${req.method} ${req.url} ‚Üí ${SOCKET_HOST}${proxyReq.path} ${isWebSocket ? '(WebSocket)' : '(HTTP)'}`);
    },
    onError: (err, req, res) => {
      console.error(`‚ùå „É¨„Ç¨„Ç∑„Éº„ÉÅ„É£„ÉÉ„Éà„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº: ${req.method} ${req.url} - ${err.message}`);
    }
  }));
  
  app.use('/tasks', createProxyMiddleware({
    target: SOCKET_HOST,
    changeOrigin: true,
    ws: true,
    secure: false,
    logLevel: 'debug',
    onProxyReq: (proxyReq, req, res) => {
      const isWebSocket = req.headers.upgrade && req.headers.upgrade.toLowerCase() === 'websocket';
      console.log(`üîå „É¨„Ç¨„Ç∑„Éº„Çø„Çπ„ÇØ„Éó„É≠„Ç≠„Ç∑: ${req.method} ${req.url} ‚Üí ${SOCKET_HOST}${proxyReq.path} ${isWebSocket ? '(WebSocket)' : '(HTTP)'}`);
    },
    onError: (err, req, res) => {
      console.error(`‚ùå „É¨„Ç¨„Ç∑„Éº„Çø„Çπ„ÇØ„Éó„É≠„Ç≠„Ç∑„Ç®„É©„Éº: ${req.method} ${req.url} - ${err.message}`);
    }
  }));
};